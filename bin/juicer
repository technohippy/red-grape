#!/usr/bin/env ruby
$: << File.expand_path('../../lib', __FILE__)

require 'optparse'
require 'sinatra'
require 'red_grape'
require 'red_grape/tools/trellis'

# interprete options
::Version = RedGrape::VERSION
COMMAND_LINE = "#{$0} #{ARGV.join(' ')}"
OPT = {}
#  port:RedGrape::Tools::Trellis::DEFAULT_PORT
opts = OptionParser.new
opts.on('-p', '--port <port number>', 
  "Set the port number (default: #{OPT[:port]})"){|v| OPT[:port] = v.to_i}
opts.on_tail('-v', '--version', 'Show version'){puts(opts.ver); exit}
opts.on_tail('-h', '--help', 'Show this message'){puts(opts.help); exit}
opts.order! ARGV

# start
use Rack::Static, :urls => ['/cellar', '/js', '/css'], :root => 'public'

graphs = nil
if OPT[:port]
  graphs = RedGrape::Tools::Trellis.open OPT[:port]
else
  graphs = RedGrape::GraphStore.new
  graphs[:tinkergraph] = RedGrape.create_tinker_graph
end

get '/' do
  {
    version: RedGrape::VERSION,
    supportedPaths: {
      GET: [
        '/graphs',
        '/graphs/[graph]',
        '/graphs/[graph]/vertices',
        '/graphs/[graph]/vertices?key=[key]&value=[value]',
        '/graphs/[graph]/vertices/[vertex]',
        '/graphs/[graph]/vertices/[vertex]/out',
        '/graphs/[graph]/vertices/[vertex]/in',
        '/graphs/[graph]/vertices/[vertex]/both',
        '/graphs/[graph]/vertices/[vertex]/[dir]?_label=[label]',
        '/graphs/[graph]/edges',
        '/graphs/[graph]/edges/[edge]',
        '/graphs/[graph]/vertices/[edge]/outE',
        '/graphs/[graph]/vertices/[edge]/inE',
        '/graphs/[graph]/vertices/[edge]/bothE',
        '/graphs/[graph]/vertices/[edge]/[dir]E?_label=[label]',
      ],
      POST: [
        #'/graphs/[graph]/vertices',
        '/graphs/[graph]/vertices/[vertex]',
        '/graphs/[graph]/vertices/[vertex]?[key1]=[value1]&[key2]=[value2]',
        #'/graphs/[graph]/edges?_outV=[vertex1]&_label=[label]&_inV=[vertex2]&[key1]=[value1]&=[key2]=[value2]',
        '/graphs/[graph]/edges/[edge]?_outV=[vertex1]&_label=[label]&_inV=[vertex2]&[key1]=[value1]&=[key2]=[value2]',
        #'/graphs/[graph]/edges/[edge]?[key1]=[key2]'
      ],
      PUT: [
        #'/graphs/[graph]/vertices/[vertex]?[key1]=[value1]&[key2]=[value2]',
        #'/graphs/[graph]/edges/[edge]?[key1]=[value1]&[key2]=[value2]'
      ],
      DELETE: [
        #'/graphs/[graph]/vertices/[vertex]',
        #'/graphs/[graph]/vertices/[vertex]?[key1]&[key2]',
        #'/graphs/[graph]/edges/[edge]',
        #'/graphs/[graph]/edges/[edge]?[key1]&[key2]'
      ]
    }
  }.to_pretty_json
end

get %r{/graphs/?$} do
  {
    version: RedGrape::VERSION,
    name: 'Juicer: A Graph Server',
    graphs: graphs.graph_names
  }.to_pretty_json
end

get %r{/graphs/([^/]+)/?$} do |graph_id|
  graphs[graph_id].to_h.to_pretty_json
end

get %r{/graphs/([^/]+)/vertices/?$} do |graph_id|
  graph = graphs[graph_id]
  k, v = params['key'], params['value']
  vertices =
    if k
      graph.vertex.find_all{|e| e[k].to_s == v}
    else
      graph.vertex
    end
  vertices.map(&:to_h).to_pretty_json
end

get %r{/graphs/([^/]+)/vertices/([^/]+)/?$} do |graph_id, vertex_id|
  graphs[graph_id].vertex(vertex_id).to_h.to_pretty_json
end

get %r{/graphs/([^/]+)/vertices/([^/]+)/(out|in|both)/?$} do |graph_id, vertex_id, dir|
  label = params['_label']
  vertex = graphs[graph_id].vertex(vertex_id)
  if label
    vertex.send(dir, label)[].map(&:to_h).to_pretty_json
  else
    vertex.send(dir)[].map(&:to_h).to_pretty_json
  end
end

get %r{/graphs/([^/]+)/edges/?$} do |graph_id|
  graphs[graph_id].edge.map(&:to_h).to_pretty_json
end

get %r{/graphs/([^/]+)/edges/([^/]+)/?$} do |graph_id, edge_id|
  graphs[graph_id].edge(edge_id).to_h.to_pretty_json
end

get %r{/graphs/([^/]+)/vertices/([^/]+)/(out_e|in_e|both_e|outE|inE|bothE)/?$} do |graph_id, vertex_id, dir|
  label = params['_label']
  vertex = graphs[graph_id].vertex(vertex_id)
  if label
    vertex.send(dir, label)[].map(&:to_h).to_pretty_json
  else
    vertex.send(dir)[].map(&:to_h).to_pretty_json
  end
end

=begin
post %r{/graphs/([^/]+)/vertices/?$} do |graph_id|
  params['splat'] = nil
  params['captures'] = nil
  graph = graphs[graph_id]
end
=end

post %r{/graphs/([^/]+)/vertices/([^/]+)/?$} do |graph_id, vertex_id|
  params.delete 'splat'
  params.delete 'captures'
  graph = graphs[graph_id]
  vertex = graph.add_vertex vertex_id, params
  vertex.to_h.to_pretty_json
end

post %r{/graphs/([^/]+)/edges/([^/]+)/?$} do |graph_id, edge_id|
  params.delete 'splat'
  params.delete 'captures'
  label = params.delete '_label'
  source = params.delete '_outV'
  target = params.delete '_inV'
  graph = graphs[graph_id]
  edge = graph.add_edge edge_id, source, target, label, params
  edge.to_h.to_pretty_json
end
